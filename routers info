===========================================================
/routers/auth.py
역할:
사용자의 인증 관련 요청을 처리하는 API 라우터.
회원가입, 로그인, 인증번호 전송 및 확인 같은 인증 흐름 전체를 담당한다.

연결된 서비스:
auth_service.py: 실제 인증 처리 로직이 들어있는 서비스 레이어
schemas/user.py: 사용자 요청을 받을 때 사용하는 데이터 구조 정의
db/get_db: SQLAlchemy 세션 의존성 주입

엔드포인트 목록:
회원가입 = 메서드-POST, 경로-/register, 요청 스키마-UserCreate, 응답-회원 생성 결과
로그인 요청 = 메서드-POST, 경로-/login, 요청 스키마-UserLogin, 응답-로그인 결과
인증번호 전송 = 메서드-POST, 경로-/auth/send-code, 요청 스키마-PhoneAuthRequest, 응답-인증번호 발송 메시지
인증번호 확인 = 메서드-POST, 경로-/auth/verify-code, 요청 스키마-PhoneAuthVerify, 응답-성공/실패 메시지

동작 흐름 요약
/register: 사용자로부터 이메일, 비밀번호, 닉네임 등을 받아 회원가입 요청을 처리한다.
/login: 이메일과 비밀번호를 입력받아 로그인 처리 후 토큰 또는 결과를 반환한다.
/auth/send-code: 사용자의 휴대폰 번호를 받아 인증번호를 생성해 저장하고 발송 메시지를 반환한다.
/auth/verify-code: 사용자가 입력한 인증번호가 DB에 저장된 값과 일치하는지 확인하고 결과를 반환한다.
================================================================

/routers/chat.py
역할:
채팅 관련 요청을 처리하는 API 라우터.
사용자가 메시지를 전송하거나 특정 채팅방의 대화 기록을 불러오는 기능을 담당한다.

연결된 서비스:
chat_service.py: 메시지 저장 및 채팅 기록 조회 로직이 구현된 서비스 레이어
pydantic.BaseModel: 메시지 전송 요청 데이터 구조 정의

엔드포인트 목록:
채팅 전송 = 메서드-POST, 경로-/chat/send, 요청 스키마-MessageRequest, 응답-성공 여부 (success: bool)
채팅 조회 = 메서드-GET, 경로-/chat/{room_id}, 요청 파라미터-room_id(str), 응답-해당 채팅방의 메시지 목록

동작 흐름 요약
/chat/send: 사용자 ID, 채팅방 ID, 메시지를 받아 해당 방에 메시지를 저장하고 성공 여부를 반환한다.
/chat/{room_id}: 채팅방 ID를 입력받아 해당 채팅방의 전체 메시지 기록을 조회하고 반환한다.
=================================================================

/routers/comment.py
역할:
법안에 대한 댓글 작성 요청을 처리하는 API 라우터.
사용자가 특정 법안에 댓글을 등록할 수 있도록 한다.

연결된 서비스:
comment_service.py: 댓글 저장 로직이 구현된 서비스 레이어
pydantic.BaseModel: 댓글 요청 데이터 구조 정의

엔드포인트 목록:
댓글 등록 = 메서드-POST, 경로-/comment, 요청 스키마-CommentRequest, 응답-성공 여부 (success: bool)

동작 흐름 요약
/comment: 사용자 ID, 법안 ID, 댓글 내용을 받아 해당 법안에 댓글을 등록하고 성공 여부를 반환한다.
=================================================================

/routers/laws.py
역할:
특정 법안의 상세 정보를 조회하는 API 라우터.
사용자가 법안의 ID를 통해 해당 법안의 상세 내용을 확인할 수 있도록 한다.

연결된 서비스:
law_service.py: 법안 상세 정보 조회 로직이 구현된 서비스 레이어

엔드포인트 목록:
법안 상세 조회 = 메서드-GET, 경로-/law/{law_id}, 요청 파라미터-law_id(str), 응답-해당 법안의 상세 정보

동작 흐름 요약
/law/{law_id}: 법안 ID를 받아 해당 법안의 상세 정보를 조회하고 반환한다.
=================================================================

/routers/mypage.py
역할:
마이페이지 관련 요청을 처리하는 API 라우터.
특정 사용자가 참여 중인 채팅방 목록을 조회할 수 있도록 한다.

연결된 서비스:
mypage_service.py: 사용자별 채팅방 목록 조회 로직이 구현된 서비스 레이어

엔드포인트 목록:
채팅방 목록 조회 = 메서드-GET, 경로-/mypage/rooms/{user_id}, 요청 파라미터-user_id(str), 응답-사용자의 채팅방 목록

동작 흐름 요약
/mypage/rooms/{user_id}: 사용자 ID를 받아 해당 사용자가 참여 중인 채팅방 목록을 조회하고 반환한다.
=================================================================

/routers/percent.py  
역할:  
특정 법안의 투표 결과(찬성/반대 비율)를 계산하여 반환하는 API 라우터.  
사용자가 법안 ID를 통해 투표 비율 데이터를 확인할 수 있도록 한다.  

연결된 서비스:  
percent_service.py: 법안별 투표 데이터의 비율을 계산하는 로직이 구현된 서비스 레이어  

엔드포인트 목록:  
투표 결과 조회 = 메서드-GET, 경로-/vote/result/{law_id}, 요청 파라미터-law_id(str), 응답-찬성/반대 투표 비율 결과  

동작 흐름 요약  
/vote/result/{law_id}: 법안 ID를 받아 해당 법안의 투표 찬반 비율을 계산하고 결과를 반환한다.  
=================================================================

/routers/search.py  
역할:  
법안 검색 및 외부 API를 통해 법안 제안·상세 데이터를 불러오는 API 라우터.  
제목 기반 검색, 상태 필터링, 정렬 방식 설정 기능을 제공하고, 외부 API로부터 입법 관련 데이터를 가져온다.  

연결된 서비스:  
law_api.py: 외부 열린국회 API와 연결되어 법안 제안 목록과 상세 정보를 불러오는 로직이 구현된 서비스 레이어  
models/bill.py: 검색 대상인 법안 데이터 모델 정의  
db/get_db.py: SQLAlchemy 세션 의존성 주입  

엔드포인트 목록:  
법안 검색 = 메서드-GET, 경로-/search, 요청 쿼리 파라미터-title(str), status(str), sort_by(str), 응답-검색된 법안 리스트  
법안 제안 목록 조회 = 메서드-GET, 경로-/law/proposals, 응답-외부 API에서 받아온 법안 제안 데이터  
법안 상세 목록 조회 = 메서드-GET, 경로-/law/details, 응답-외부 API에서 받아온 법안 상세 데이터  

동작 흐름 요약  
/search: 제목을 기준으로 법안을 검색하고, 상태(`draft`, `enacted`)나 정렬 기준(`created_at`, `views`)을 설정해 결과를 필터링한 뒤 번호를 붙여 반환한다.  
/law/proposals: 열린국회 API로부터 법안 제안 목록을 받아와 반환한다.  
/law/details: 열린국회 API로부터 법안 상세 목록을 받아와 반환한다.  
=================================================================

/routers/summary.py  
역할:  
최신 법안 요약 정보를 상태별로 제공하는 API 라우터.  
'발의(draft)'와 '공포(enacted)' 상태의 법안을 각각 최대 7개까지 요약해 반환한다.  

연결된 서비스:  
models/bill.py: 법안 데이터 모델 정의  
db/get_db.py: SQLAlchemy 세션 의존성 주입  

엔드포인트 목록:  
법안 요약 조회 = 메서드-GET, 경로-/summary, 응답-각 상태별로 최신 7개의 법안 요약 데이터 (name, description, created_at 포함)  

동작 흐름 요약  
/summary: 데이터베이스에서 'draft'와 'enacted' 상태의 법안을 각각 생성일 기준으로 정렬해 7개씩 가져와 요약 정보를 반환한다.  
=================================================================

/routers/vote.py
역할:
사용자가 법안에 대해 찬반 투표를 제출하는 API 라우터.

연결된 서비스:
vote_service.py: 투표 처리 로직이 들어있는 서비스 레이어

엔드포인트 목록:
투표 제출 = 메서드-POST, 경로-/vote, 요청 스키마-VoteRequest, 응답-투표 성공 여부(success: bool)

동작 흐름 요약
/vote: 사용자 ID, 법안 ID, 투표 유형("yes" 또는 "no")을 받아 투표를 처리하고 성공 여부를 반환한다.
================================================================

/routers/votecheck.py
역할:
사용자가 특정 법안에 대해 이미 투표했는지 확인하는 API 라우터.

연결된 서비스:
votecheck\_service.py: 투표 여부 확인 로직이 들어있는 서비스 레이어

엔드포인트 목록:
투표 여부 확인 = 메서드-GET, 경로-/vote/check, 쿼리 파라미터-user\_id(str), law\_id(str), 응답-투표 여부(voted: bool)

동작 흐름 요약
/vote/check: 사용자 ID와 법안 ID를 받아 해당 사용자가 그 법안에 대해 투표했는지 여부를 반환한다.
================================================================

실행 속도를 높이기 위해 자동 생성된 컴파일 파일 폴더
/routers/_pycache_

