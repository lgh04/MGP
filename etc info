=====================================================
/tasks/scheduler.py  
역할:  
APScheduler를 이용해 특정 작업을 매일 새벽 3시에 자동 실행하는 스케줄링 모듈.  

주요 기능:  
-새벽 3시에 국회 API 데이터를 가져와 DB에 저장하는 작업 예약  
-DB 세션을 안전하게 열고 닫으며 작업 수행  

함수 목록 및 설명:  
-def start_scheduler():  
- 백그라운드 스케줄러를 생성하고 시간대를 "Asia/Seoul"로 설정  
- 내부 함수 `task()`를 정의하여 `save_bills_to_db()`를 호출하고 작업 후 DB 세션 종료  
- `task()`를 매일 3시 정각에 실행되도록 cron 방식으로 예약  
- 스케줄러를 시작  

동작 흐름 요약:  
앱이 실행될 때  
→ `start_scheduler()` 호출  
→ APScheduler가 새벽 3시에 `task()`를 자동 실행  
→ 국회 API로부터 법안 정보를 받아 DB에 저장  

=========================================================
main.py  
역할:  
FastAPI 애플리케이션의 진입점이며, 전체 라우터 등록과 DB 초기화, 스케줄러 실행을 담당한다.  

주요 기능:  
- FastAPI 앱 인스턴스 생성  
- 인증, 법안, 채팅, 댓글, 마이페이지, 투표 등 다양한 기능별 라우터 등록  
- SQLAlchemy의 Base를 사용해 DB 테이블 생성  
- 백그라운드 스케줄러 시작 (법안 데이터 주기적 수집용)  
- 기본 "/" 엔드포인트로 환영 메시지 제공  

동작 흐름 요약:  
앱 실행 시  
→ DB 테이블 생성  
→ 각종 API 라우터 등록  
→ 주기 작업 스케줄러 실행  
→ 루트 경로에서 간단한 환영 메시지 반환  

========================================================
scheduler.py  
역할:  
법률 데이터 자동 갱신을 위한 백그라운드 스케줄러를 설정하고 실행하는 모듈.  

주요 기능:  
- 법률 제안과 상세 정보를 외부 API에서 주기적으로 가져오는 작업 정의  
- APScheduler를 사용해 매일 새벽 3시에 자동 갱신 작업 예약  
- 데이터 수집 현황 로그 출력  
- (TODO) 수집한 데이터를 DB 등에 저장하는 부분은 추후 구현 예정  

동작 흐름 요약:  
스케줄러 시작 시  
→ 매일 03:00에 update_law_data 함수 실행  
→ 법안 제안과 상세 데이터 API 호출 및 수집  
→ 수집 건수 콘솔에 출력  
→ 추후 수집 데이터 저장 처리 예정  

===========================================
