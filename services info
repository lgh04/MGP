=============================================================
/services/auth_service.py
역할:
사용자 인증과 관련된 핵심 비즈니스 로직을 담당하는 서비스 레이어
회원가입, 로그인, 인증번호 생성 및 검증 등 인증 흐름 전반을 처리한다

주요 기능:
-이메일 형식 및 중복 검사
-비밀번호 유효성 검사 (특수문자 포함 8자 이상)
-이메일로 사용자 검색
-로그인 실패 시 예외 처리
-세션 역할 대체 반환 (간단히 user_id 포함 dict 반환)
-회원가입 처리 (닉네임 중복, 비밀번호 확인, 휴대폰 인증 확인 포함)
-로그인 처리 (비밀번호 검증 포함)
-인증번호 생성 및 DB 저장
-인증번호 검증 (최신 코드와 입력값 비교)

함수 목록 및 설명:
-def input_email(email, db): 이메일 형식 및 중복 확인, 오류 발생 시 HTTPException
-def input_password(password): 비밀번호 조건 검사, 미충족 시 HTTPException
-def find_user_by_email(email, db): DB에서 이메일로 사용자 조회
-def handle_login_error(reason): 로그인 실패 시 401 오류 발생
-def set_session(user_id): 세션 저장 대신 user_id 반환
-def create_user(user_data, db): 회원가입 처리, 유효성 검사 및 DB 저장 후 세션 반환
-def authenticate_user(user, db): 로그인 처리, 이메일과 비밀번호 검증 후 세션 반환
-def generate_auth_code(phone, db): 6자리 인증번호 생성 및 DB 저장 후 코드 반환
-def verify_auth_code(phone, input_code, db): DB의 최신 인증번호와 입력값 일치 여부 반환

동작 흐름 요약
회원가입 시 이메일, 비밀번호, 닉네임 중복 체크 및 휴대폰 인증 코드 검증을 거쳐 사용자 생성 후 세션 대체값 반환
로그인 시 이메일 존재 및 비밀번호 검증을 거쳐 세션 대체값 반환
인증번호 요청 시 6자리 난수 생성해 DB 저장 및 반환
인증번호 검증 시 최신 DB 저장 코드와 사용자 입력값 비교해 결과 반환
=============================================================

/services/bill_fetcher.py
역할:
국회 오픈 API를 통해 법안 데이터를 가져오고, 이를 데이터베이스에 저장하는 역할을 담당하는 서비스 레이어

주요 기능:
-국회 API 요청을 통해 JSON 형식의 법안 데이터 수집
-법안 제목으로 조건 검색 가능 (선택적)
-이미 존재하는 법안은 중복 저장 방지
-새로운 법안 데이터를 SQLAlchemy를 통해 DB에 저장

함수 목록 및 설명:
-def fetch_api_data(url, bill_name=None): 지정된 URL에서 API 데이터를 요청해 JSON 결과를 반환. bill_name 인자를 통해 제목 검색 가능
-def save_bills_to_db(db): 국회 API에서 모든 법안 데이터를 가져와 중복 확인 후 새로운 법안만 DB에 저장

동작 흐름 요약
save_bills_to_db 함수는 URL_2에서 전체 법안 목록을 가져옴
→ 각 법안의 BILL_ID를 기준으로 DB에 존재 여부 확인
→ 존재하지 않는 법안만 SQLAlchemy 모델로 변환 후 DB에 추가
→ 마지막에 전체 커밋하여 저장 완료
=============================================================

/services/chat_service.py
역할:
사용자 간의 채팅 메시지를 저장하고 조회하는 기능을 제공하는 서비스 레이어.
SQLite 데이터베이스를 이용하여 채팅 내역을 관리한다.

주요 기능:
-채팅 메시지를 DB에 저장
-지정된 채팅방의 전체 메시지 이력을 시간순으로 조회

함수 목록 및 설명:
-def send_message(user_id, room_id, message): 주어진 메시지를 `chat_messages` 테이블에 저장. 저장 성공 여부를 bool로 반환
-def get_chat_history(room_id): 지정된 room_id의 채팅 이력을 시간순으로 조회해 리스트로 반환

동작 흐름 요약
사용자가 메시지를 전송하면 send_message 함수가 acton.db에 연결해 데이터를 삽입하고 커밋
get_chat_history 함수는 해당 채팅방의 모든 메시지를 시간순으로 정렬하여 반환
=============================================================

/services/comment_service.py  
역할:  
사용자가 특정 법안에 대해 작성한 댓글을 데이터베이스에 저장하는 기능을 담당하는 서비스 레이어.  

주요 기능:  
-댓글 내용을 acton.db의 `comments` 테이블에 저장  
-저장 성공 여부를 반환  

함수 목록 및 설명:  
-def submit_comment(user_id, law_id, content):  
- 주어진 user_id, law_id, 댓글 내용을 현재 시각과 함께 `comments` 테이블에 삽입  
- 저장 성공 시 True 반환, 실패 시 False 반환하며 예외 출력  

동작 흐름 요약:  
submit_comment 함수는 SQLite에 연결해 댓글 데이터를 삽입  
→ 커밋 후 연결 종료  
→ 예외 발생 시 실패 메시지를 출력하고 False 반환  
=============================================================

/services/law_api.py  
역할:  
국회의 오픈 API를 통해 법안 목록 및 상세 정보를 요청하고 응답 데이터를 반환하는 서비스 레이어.  

주요 기능:  
-법안 목록(발의 법안) 조회 요청  
-법안 상세 정보 조회 요청  

함수 목록 및 설명:  
-def fetch_law_proposals(p_index=1, p_size=100):  
- 국회 API에서 발의된 법안 목록 데이터를 JSON 형식으로 가져와 반환  
- 인덱스와 페이지 크기를 인자로 받음  

-def fetch_law_details(p_index=1, p_size=100):  
- 국회 API에서 법안의 상세 정보를 JSON 형식으로 가져와 반환  
- 인덱스와 페이지 크기를 인자로 받음  

동작 흐름 요약:  
각 함수는 `requests.get`을 통해 국회 API에 요청을 보내고,  
→ 받은 응답을 `.json()`으로 변환해 반환  
→ 요청 시 API 키와 JSON 응답 형식을 포함한 파라미터를 함께 전달  
=============================================================

/services/law_service.py  
역할:  
특정 법안 ID에 대한 상세 정보를 국회 API에서 조회하여 필요한 정보를 가공해 반환하는 서비스 레이어.  

주요 기능:  
-법안 ID를 기반으로 법안 상세 정보 조회  
-응답 데이터 중 필요한 필드만 추출해 가공된 딕셔너리 형태로 반환  

함수 목록 및 설명:  
-def fetch_law_detail(law_id: str) -> dict:  
- 국회 API에 BILL_ID를 전달해 해당 법안의 상세 데이터를 요청  
- 응답이 성공적일 경우 제목(`BILL_NAME`)과 제안자(`RST_PROPOSER`) 정보를 딕셔너리로 구성해 반환  
- 실패 시 에러 메시지와 함께 기본 응답 반환  
- 예외 발생 시 콘솔 출력 및 오류 메시지 반환  

동작 흐름 요약:  
법안 ID를 파라미터로 받아  
→ 국회 API에 요청  
→ 응답에서 `BILL_NAME`과 `RST_PROPOSER`를 추출  
→ 이를 `"title"`과 `"content"` 필드로 반환  
→ 실패 시 오류 메시지를 포함한 기본 구조 반환  
=============================================================

/services/mypage_service.py  
역할:  
사용자의 마이페이지에서 참여 중인 토론방 목록을 조회하는 기능을 담당하는 서비스 레이어.  

주요 기능:  
-사용자가 참여한 토론방 목록을 데이터베이스에서 조회  
-토론방 ID와 이름을 포함한 리스트 형태로 반환  

함수 목록 및 설명:  
-def get_user_rooms(user_id: str) -> list:  
- `user_room_mapping` 테이블과 `discussion_rooms` 테이블을 조인하여  
  주어진 사용자 ID와 매칭된 모든 토론방 정보를 조회  
- 조회된 결과를 `room_id`와 `room_name`이 포함된 딕셔너리 리스트로 가공해 반환  

동작 흐름 요약:  
사용자 ID를 기반으로  
→ `user_room_mapping`에서 매칭된 room_id를 조회  
→ 해당 room_id를 가진 `discussion_rooms`의 이름과 함께 조인  
→ 최종적으로 `[{"room_id": ..., "room_name": ...}, ...]` 형식으로 반환  
=============================================================

/services/percent_service.py  
역할:  
특정 법안에 대한 전체 투표 결과를 바탕으로 찬반 비율(%)을 계산하는 서비스 레이어.  

주요 기능:  
-법안 ID에 해당하는 투표 결과를 DB에서 조회  
-찬성/반대 투표 비율을 계산하여 정수형 백분율로 반환  

함수 목록 및 설명:  
-def calculate_vote_percentages(law_id: str) -> dict:  
- `votes` 테이블에서 주어진 `law_id`에 대한 모든 투표 유형(`vote_type`)을 조회  
- `yes`와 `no`의 개수를 세고 전체 투표 수 대비 비율을 계산  
- 전체 투표 수가 0이면 찬반 모두 0%로 반환  
- 결과는 `{"yes": xx, "no": yy}` 형태로 반환  

동작 흐름 요약:  
법안 ID를 입력받아  
→ `votes` 테이블에서 해당 법안에 대한 모든 투표를 조회  
→ 찬성/반대 개수를 분리해 합산  
→ 전체 대비 각각의 백분율을 계산해 정수형으로 반환  
→ 투표가 없을 경우 0%로 처리  
=============================================================

/services/vote_service.py  
역할:  
특정 사용자에 의한 법안 투표 정보를 데이터베이스에 저장하는 기능을 담당하는 서비스 레이어.  

주요 기능:  
-사용자가 특정 법안에 대해 찬성 또는 반대 투표를 제출  
-투표 정보를 DB에 저장 (`votes` 테이블)  
-투표 시간은 현재 시간으로 자동 기록  

함수 목록 및 설명:  
-def submit_vote(user_id: str, law_id: str, vote_type: str) -> bool:  
- `votes` 테이블에 `user_id`, `law_id`, `vote_type`, `vote_time` 값을 삽입  
- 실패 시 에러 메시지를 출력하고 `False` 반환  
- 성공 시 `True` 반환  

동작 흐름 요약:  
사용자 ID, 법안 ID, 투표 유형(찬성/반대)을 입력받아  
→ 현재 시간과 함께 DB에 저장  
→ 정상 저장 시 `True`, 실패 시 `False` 반환  
=============================================================

/services/votecheck_service.py  
역할:  
특정 사용자가 특정 법안에 대해 이미 투표했는지 여부를 확인하는 서비스 레이어.  

주요 기능:  
-사용자 ID와 법안 ID를 기반으로 DB에서 해당 투표 기록 존재 여부를 확인  

함수 목록 및 설명:  
-def has_voted(user_id: str, law_id: str) -> bool:  
- `votes` 테이블에서 `user_id`와 `law_id`가 모두 일치하는 투표 기록 수를 조회  
- 조회된 수가 0보다 크면 이미 투표한 것으로 판단하여 `True` 반환  
- 그렇지 않으면 `False` 반환  

동작 흐름 요약:  
사용자 ID와 법안 ID를 입력받아  
→ DB에서 해당 조합의 투표 기록 개수를 조회  
→ 투표한 기록이 있으면 `True`, 없으면 `False` 반환  
=============================================================

실행 속도를 높이기 위한 컴파일 파일
/services/__pycache__

